# -*- coding: utf-8 -*-
"""2223140.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-w1GDXQgVETA8ryyTjnU9rHn7cWHm1__
"""

import pandas as pd

def find_absent_streaks(path):
    # Read data
    df = pd.read_excel(path)

    # Ensure correct column format
    df['date'] = pd.to_datetime(df['date'])
    df = df.sort_values(by=['student_id', 'date'])

    # Group data by student_id and process each group separately
    results = []
    for student_id, group in df.groupby('student_id'):
        group = group.sort_values(by='date')
        group['gap'] = group['date'].diff().dt.days.fillna(1)
        group['streak_id'] = (group['gap'] > 1).cumsum()

        streaks = group.groupby('streak_id').agg(
            absence_start_date=('date', 'first'),
            absence_end_date=('date', 'last'),
            total_absent_days=('date', 'count')
        ).reset_index()

        # Filter streaks with more than 3 consecutive absent days
        streaks = streaks[streaks['total_absent_days'] > 3]

        if not streaks.empty:
            latest_streak = streaks.iloc[-1]
            results.append({
                'student_id': student_id,
                'absence_start_date': latest_streak['absence_start_date'],
                'absence_end_date': latest_streak['absence_end_date'],
                'total_absent_days': latest_streak['total_absent_days']
            })

    return pd.DataFrame(results)

from google.colab import files
uploaded = files.upload()

import pandas as pd
import re

def validate_email(email):
    pattern = r'^[a-zA-Z_][a-zA-Z0-9_]*@[a-zA-Z]+\.com$'
    return bool(re.match(pattern, email))

def find_absent_streaks(attendance_path, students_path):
    # Read data
    attendance_df = pd.read_excel(attendance_path)
    students_df = pd.read_excel(students_path)

    # Convert to datetime and filter absences
    attendance_df['attendance_date'] = pd.to_datetime(attendance_df['attendance_date'])
    attendance_df = attendance_df[attendance_df['status'] == 'Absent']

    # Sort by student_id and date
    attendance_df = attendance_df.sort_values(by=['student_id', 'attendance_date'])

    results = []
    for student_id, group in attendance_df.groupby('student_id'):
        group['gap'] = group['attendance_date'].diff().dt.days.fillna(1)
        group['streak_id'] = (group['gap'] > 1).cumsum()

        streaks = group.groupby('streak_id').agg(
            absence_start_date=('attendance_date', 'first'),
            absence_end_date=('attendance_date', 'last'),
            total_absent_days=('attendance_date', 'count')
        ).reset_index()

        # Filter streaks with more than 3 consecutive absent days
        streaks = streaks[streaks['total_absent_days'] > 3]

        if not streaks.empty:
            latest_streak = streaks.iloc[-1]
            results.append({
                'student_id': student_id,
                'absence_start_date': latest_streak['absence_start_date'],
                'absence_end_date': latest_streak['absence_end_date'],
                'total_absent_days': latest_streak['total_absent_days']
            })

    absent_df = pd.DataFrame(results)

    # Merge with students table to get parent emails
    merged_df = absent_df.merge(students_df[['student_id', 'parent_email', 'student_name']], on='student_id', how='left')

    # Validate emails
    merged_df['email'] = merged_df['parent_email'].apply(lambda x: x if validate_email(str(x)) else None)

    # Generate messages for valid emails
    merged_df['msg'] = merged_df.apply(lambda row: f"Dear Parent, your child {row['student_name']} was absent from {row['absence_start_date'].date()} to {row['absence_end_date'].date()} for {row['total_absent_days']} days. Please ensure their attendance improves." if row['email'] else None, axis=1)

    # Keep only required columns
    final_df = merged_df[['student_id', 'absence_start_date', 'absence_end_date', 'total_absent_days', 'email', 'msg']]

    return final_df

attendance_file = "/mnt/data/data - sample.xlsx"
students_file = "/mnt/data/data - sample.xlsx"  # Update this if you have a separate students file.

import pandas as pd
import re
from tabulate import tabulate

def validate_email(email):
    pattern = r'^[a-zA-Z_][a-zA-Z0-9_]*@[a-zA-Z]+\.com$'
    return bool(re.match(pattern, email))

def find_absent_streaks(file_path):
    # Load the Excel file and check sheet names
    xls = pd.ExcelFile(file_path)
    print("Available Sheets:", xls.sheet_names)

    # Read attendance and student data (modify sheet names if necessary)
    attendance_df = pd.read_excel(xls, sheet_name=0)  # First sheet for attendance
    students_df = pd.read_excel(xls, sheet_name=1)  # Second sheet for student details

    # Convert to datetime and filter absences
    attendance_df['attendance_date'] = pd.to_datetime(attendance_df['attendance_date'])
    attendance_df = attendance_df[attendance_df['status'] == 'Absent']

    # Sort by student_id and date
    attendance_df = attendance_df.sort_values(by=['student_id', 'attendance_date'])

    results = []
    for student_id, group in attendance_df.groupby('student_id'):
        group['gap'] = group['attendance_date'].diff().dt.days.fillna(1)
        group['streak_id'] = (group['gap'] > 1).cumsum()

        streaks = group.groupby('streak_id').agg(
            absence_start_date=('attendance_date', 'first'),
            absence_end_date=('attendance_date', 'last'),
            total_absent_days=('attendance_date', 'count')
        ).reset_index()

        # Filter streaks with more than 3 consecutive absent days
        streaks = streaks[streaks['total_absent_days'] > 3]

        if not streaks.empty:
            latest_streak = streaks.iloc[-1]
            results.append({
                'student_id': student_id,
                'absence_start_date': latest_streak['absence_start_date'],
                'absence_end_date': latest_streak['absence_end_date'],
                'total_absent_days': latest_streak['total_absent_days']
            })

    absent_df = pd.DataFrame(results)

    # Merge with students table to get parent emails
    merged_df = absent_df.merge(students_df[['student_id', 'parent_email', 'student_name']], on='student_id', how='left')

    # Validate emails
    merged_df['email'] = merged_df['parent_email'].apply(lambda x: x if validate_email(str(x)) else None)

    # Generate messages for valid emails
    merged_df['msg'] = merged_df.apply(lambda row: f"Dear Parent, your child {row['student_name']} was absent from {row['absence_start_date'].date()} to {row['absence_end_date'].date()} for {row['total_absent_days']} days. Please ensure their attendance improves." if row['email'] else None, axis=1)

    # Keep only required columns
    final_df = merged_df[['student_id', 'absence_start_date', 'absence_end_date', 'total_absent_days', 'email', 'msg']]

    return final_df

# Example execution
file_path = "/content/data - sample.xlsx"
result_df = find_absent_streaks(file_path)
print(tabulate(result_df, headers='keys', tablefmt='grid'))